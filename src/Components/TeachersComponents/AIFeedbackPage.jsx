import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { Container, Card, Alert, Spinner } from 'react-bootstrap';
import { supabase } from '../../SupabaseAuth/supabaseClient';

const AIFeedbackPage = () => {
  const { examId } = useParams();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [examTitle, setExamTitle] = useState('');
  const [feedback, setFeedback] = useState(null);

  useEffect(() => {
    const generateFeedback = async () => {
      try {
        setLoading(true);
        setError(null);

        // Fetch questions
        const { data: questions, error: questionsError } = await supabase
          .from('mcq_questions')
          .select('*')
          .eq('exam_id', examId);

        if (questionsError) throw new Error('Failed to fetch questions');

        // Fetch submissions
        const { data: submissions, error: submissionsError } = await supabase
          .from('exam_submissions')
          .select('*')
          .eq('exam_id', examId);

        if (submissionsError) throw new Error('Failed to fetch submissions');

        // Fetch exam title
        const { data: examData, error: examError } = await supabase
          .from('exams')
          .select('title')
          .eq('exam_id', examId)
          .single();

        if (examError) throw new Error('Failed to fetch exam title');
        setExamTitle(examData?.title || 'Unknown Exam');  
        
        
        // Construct prompt for structured feedback
        const prompt = `
You are an educational AI assistant. Analyze the following exam data and generate structured teaching feedback in JSON format with these sections:

{
  "keyStrengths": [],
  "mostMissedQuestions": [],
  "teachingSuggestions": [],
  "overallSummary": "",
  "nextSteps": []
}

Questions: ${JSON.stringify(questions, null, 2)}
Submissions: ${JSON.stringify(submissions, null, 2)}

Give your response ONLY as a valid JSON object with the exact keys above.
        `;

        // Call backend API
        const response = await fetch('http://localhost:5000/api/cohere/generate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ prompt })
        });

        if (!response.ok) throw new Error('Cohere API call failed');

        const data = await response.json();
        const parsed = JSON.parse(data.result);
        setFeedback(parsed);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    generateFeedback();
  }, [examId]);

  if (loading) return (
    <div className="text-center my-5">
      <Spinner animation="border" />
      <p>Generating AI feedback...</p>
    </div>
  );

  if (error) return (
    <Container className="mt-4">
      <Alert variant="danger">
        <strong>Error:</strong> {error}
      </Alert>
    </Container>
  );

  return (
    <Container className="mt-4">
      <Card className="shadow-sm mb-4">
        <Card.Header className="bg-primary text-white">
          <h4>AI-Generated Teaching Feedback</h4>
          <span className="small">Exam Name: {examTitle}</span>
        </Card.Header>
        <Card.Body>
          {feedback ? (
            <>
              <Section title="📊 Overall Summary" text={feedback.overallSummary} />
              <Section title="✅ Key Strengths" items={feedback.keyStrengths} />
              <Section title="⚠️ Most Missed Questions" items={feedback.mostMissedQuestions} />
              <Section title="💡 Teaching Suggestions" items={feedback.teachingSuggestions} />              
              {feedback.nextSteps?.length > 0 && (
                <Section title="🚀 Actionable Next Steps" items={feedback.nextSteps} />
              )}
            </>
          ) : (
            <p>No feedback generated.</p>
          )}
        </Card.Body>
      </Card>

      <Alert variant="info">
        <i className="bi bi-robot"></i> Feedback is generated by AI analysis of exam data using Cohere.
      </Alert>
    </Container>
  );
};

// Reusable section component
const Section = ({ title, items = [], text = '' }) => (
  <div className="mb-4">
    <h5 className="text-secondary">{title}</h5>
    {items.length > 0 ? (
      <ul>
        {items.map((item, index) => (
          <li key={index}>{item}</li>
        ))}
      </ul>
    ) : (
      <p>{text}</p>
    )}
  </div>
);

export default AIFeedbackPage;
